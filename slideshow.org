#    -*- mode: org -*-
#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+Title: Rails and Phoenix Side-by-Side
#+Author: Scott Smith (OldFartDeveloper)
#+Email: scottnelsonsmith@gmail.com

* Introduction

- Tonight:

  - Introduce *Elixir* / *Phoenix*

  - Use scaffolding to generate almost identical web apps in:
    - Rails
    - Phoenix

  - Web Sockets/Channels
    - Interaction between Phoenix and Javascript
    - A chat app

  - Questions

* Elixir / Phoenix

  - Elixir :: A syntactically-rich functional language that transpiles to Erlang,
              a mature ultra-reliable language and library that's been developed
              ove the last 30 years.
  - Phoenix :: A web framework implemented in Elixir and patterned liked Rails.

** Elixir

    - Syntax is not Ruby but feels like it.
    - Like Ruby, has powerful metaprogramming capability.

** Phoenix

  - Patterned after Rails
    - Model/View/Controller
    - Migrations
    - Scaffolding
    - Console

** Erlang

  - Highly evolved language/framework for challenging concurrancy applications
    that have to be reliable
  - Mechanisms to handle failures of /just about anything/
  - Not going to cover here

* Scaffold Generate Same App in Rails and Phoenix

1. Generate Rails and Phoenix "starter" apps side by side

1. Measure both for performance

1. Generate 'user' CRUD both on *Postgresql*

1. Measure both for performance

** Commands to Generate "starter" apps

#+ATTR_HTML: :width 100%

| Purpose           | Rails                             | Phoenix                     |
|-------------------+-----------------------------------+-----------------------------|
| Language Install  | brew install ruby                 | brew install elixir         |
| Pkg Mgr           |                                   | mix local.hex               |
| Framework Install | gem install rails                 | mix archive install phoenix |
| Create App        | rails new -d postgresql demorails | mix phoenix.new demophoenix |
| Create Database   | rake db:create; rake db:migrate   | createdb demophoenix_dev    |
| Run App           | rails server                      | mix phoenix.server          |
| Browse URL        | localhost:3000                    | localhost:4000              |


*** Minor Elixir Basic Fixes

- The scaffold generators haven't yet been updated yet.

- [[https://gist.github.com/chrismccord/57805158f463d3369103][Phoenix Upgrade Instructions 0.13.x 0.14.0]]

#+BEGIN_SRC
cd web/templates/layout
mv application.html.eex app.html.eex
#+END_SRC

** Measure "starter" Apps Performance

#+ATTR_HTML: :width 100%
|             | demorails                            | demophoenix                          |
|-------------+--------------------------------------+--------------------------------------|
| cmd         | weighttp -n 1000 -c 4 localhost:3000 | weighttp -n 1000 -c 4 localhost:4000 |
| req/s       | 192                                  | 291                                  |
| finished/s  | 5.206                                | 3.429                                |
| kbyte/s     | 2885                                 | 654                                  |
| total bytes | 15,385,000                           | 2,299,000                            |
| http bytes  | 450,000                              | 205,000                              |
| data bytes  | 14,935,000                           | 2,094,000                            |


** Generate 'user' CRUD Enhancement

#+ATTR_HTML: :width 100%
| App         | Command to Generate User w/ email and password               |
|-------------+--------------------------------------------------------------|
| demorails   | rails generate scaffold User email:string password:string    |
| demorails   | rails server                                                 |
| demophoenix | mix phoenix.gen.html User users email:string password:string |
| demophoenix | mix ecto.migrate                                             |
| demophoenix | mix phoenix.server                                           |

** Measure Performance w/ Database

#+ATTR_HTML: :width 100%
|             | demorails                                  | demophoenix                                |
|-------------+--------------------------------------------+--------------------------------------------|
| cmd         | weighttp -n 1000 -c 4 localhost:3000/users | weighttp -n 1000 -c 4 localhost:4000/users |
| req/s       | 28                                         | 68                                         |
| finished/s  | 34.956                                     | 14.599                                     |
| kbyte/s     | 79                                         | 140                                        |
| total bytes | 2,862,000                                  | 2,099,000                                  |
| http bytes  | 786,000                                    | 352,000                                    |
| data bytes  | 2,076,000                                  | 1,747,000                                  |

** Performance Comparison Considerations

- There are lies, damned lies, and statistics.

  - Apples-to-apples comparison is hard.

    - Rails was run w/ Webrick, hardly hi-performance
    - Rerunning test w/ 1 test thread instead of 4
      - Marginal degradation in Elixir.
      - Didn't push Elixir hard enough.

  - Moral: know what you are perf testing for.

* Demonstrate Web Sockets/Channels in Chat App
** Demonstrate Chat App
- Demo
- The [[http://localhost:5000][Code]]
* Links
- My slideshow will be posted after the meeting this evening
  - Link will be posted on our OC Ruby Meetup page for this meeting
- [[http://www.phoenixframework.org/][Phoenix Framework]]
- [[https://github.com/chrismccord/phoenix_chat_example][Phoenix Chat Example]]
- [[http://elixir-lang.org/][elixir]]
- Recommended Books (I've read these)
  - [[http://www.manning.com/juric/][Elixir in Action]]
  - [[https://pragprog.com/book/elixir/programming-elixir][Programming Elixir]]
- [[http://www.phoenixframework.org/docs/overview][Guides]] are excellent
* Questions
